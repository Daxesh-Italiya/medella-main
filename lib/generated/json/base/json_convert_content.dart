// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:medella/generated/json/api_response_entity_helper.dart';
import 'package:medella/generated/json/city_entity_helper.dart';
import 'package:medella/generated/json/family_response_entity_helper.dart';
import 'package:medella/generated/json/get_me_response_entity_helper.dart';
import 'package:medella/generated/json/hospital_response_entity_helper.dart';
import 'package:medella/generated/json/sign_up_response_entity_helper.dart';
import 'package:medella/generated/json/state_entity_helper.dart';
import 'package:medella/generated/json/u_t_response_entity_helper.dart';
import 'package:medella/models/api_response_entity.dart';
// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:medella/models/city_entity.dart';
import 'package:medella/models/family_response_entity.dart';
import 'package:medella/models/get_me_response_entity.dart';
import 'package:medella/models/hospital_response_entity.dart';
import 'package:medella/models/sign_up_response_entity.dart';
import 'package:medella/models/state_entity.dart';
import 'package:medella/models/u_t_response_entity.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case CityEntity:
        return cityEntityFromJson(data as CityEntity, json) as T;
      case StateEntity:
        return stateEntityFromJson(data as StateEntity, json) as T;
      case SignUpResponseEntity:
        return signUpResponseEntityFromJson(data as SignUpResponseEntity, json)
            as T;
      case SignUpResponseData:
        return signUpResponseDataFromJson(data as SignUpResponseData, json)
            as T;
      case SignUpResponseDataUser:
        return signUpResponseDataUserFromJson(
            data as SignUpResponseDataUser, json) as T;
      case HospitalResponseEntity:
        return hospitalResponseEntityFromJson(
            data as HospitalResponseEntity, json) as T;
      case HospitalResponseResult:
        return hospitalResponseResultFromJson(
            data as HospitalResponseResult, json) as T;
      case HospitalResponseResultData:
        return hospitalResponseResultDataFromJson(
            data as HospitalResponseResultData, json) as T;
      case GetMeResponseEntity:
        return getMeResponseEntityFromJson(data as GetMeResponseEntity, json)
            as T;
      case GetMeResponseData:
        return getMeResponseDataFromJson(data as GetMeResponseData, json) as T;
      case GetMeResponseDataHospialNetwork:
        return getMeResponseDataHospialNetworkFromJson(
            data as GetMeResponseDataHospialNetwork, json) as T;
      case GetMeResponseDataHospialNetworkUserhospital:
        return getMeResponseDataHospialNetworkUserhospitalFromJson(
            data as GetMeResponseDataHospialNetworkUserhospital, json) as T;
      case UTResponseEntity:
        return uTResponseEntityFromJson(data as UTResponseEntity, json) as T;
      case ApiResponseEntity:
        return apiResponseEntityFromJson(data as ApiResponseEntity, json) as T;
      case FamilyResponseEntity:
        return familyResponseEntityFromJson(data as FamilyResponseEntity, json)
            as T;
      case FamilyResponseResult:
        return familyResponseResultFromJson(data as FamilyResponseResult, json)
            as T;
      case FamilyResponseResultData:
        return familyResponseResultDataFromJson(
            data as FamilyResponseResultData, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case CityEntity:
        return cityEntityToJson(data as CityEntity);
      case StateEntity:
        return stateEntityToJson(data as StateEntity);
      case SignUpResponseEntity:
        return signUpResponseEntityToJson(data as SignUpResponseEntity);
      case SignUpResponseData:
        return signUpResponseDataToJson(data as SignUpResponseData);
      case SignUpResponseDataUser:
        return signUpResponseDataUserToJson(data as SignUpResponseDataUser);
      case HospitalResponseEntity:
        return hospitalResponseEntityToJson(data as HospitalResponseEntity);
      case HospitalResponseResult:
        return hospitalResponseResultToJson(data as HospitalResponseResult);
      case HospitalResponseResultData:
        return hospitalResponseResultDataToJson(
            data as HospitalResponseResultData);
      case GetMeResponseEntity:
        return getMeResponseEntityToJson(data as GetMeResponseEntity);
      case GetMeResponseData:
        return getMeResponseDataToJson(data as GetMeResponseData);
      case GetMeResponseDataHospialNetwork:
        return getMeResponseDataHospialNetworkToJson(
            data as GetMeResponseDataHospialNetwork);
      case GetMeResponseDataHospialNetworkUserhospital:
        return getMeResponseDataHospialNetworkUserhospitalToJson(
            data as GetMeResponseDataHospialNetworkUserhospital);
      case UTResponseEntity:
        return uTResponseEntityToJson(data as UTResponseEntity);
      case ApiResponseEntity:
        return apiResponseEntityToJson(data as ApiResponseEntity);
      case FamilyResponseEntity:
        return familyResponseEntityToJson(data as FamilyResponseEntity);
      case FamilyResponseResult:
        return familyResponseResultToJson(data as FamilyResponseResult);
      case FamilyResponseResultData:
        return familyResponseResultDataToJson(data as FamilyResponseResultData);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (CityEntity).toString()) {
      return CityEntity().fromJson(json);
    }
    if (type == (StateEntity).toString()) {
      return StateEntity().fromJson(json);
    }
    if (type == (SignUpResponseEntity).toString()) {
      return SignUpResponseEntity().fromJson(json);
    }
    if (type == (SignUpResponseData).toString()) {
      return SignUpResponseData().fromJson(json);
    }
    if (type == (SignUpResponseDataUser).toString()) {
      return SignUpResponseDataUser().fromJson(json);
    }
    if (type == (HospitalResponseEntity).toString()) {
      return HospitalResponseEntity().fromJson(json);
    }
    if (type == (HospitalResponseResult).toString()) {
      return HospitalResponseResult().fromJson(json);
    }
    if (type == (HospitalResponseResultData).toString()) {
      return HospitalResponseResultData().fromJson(json);
    }
    if (type == (GetMeResponseEntity).toString()) {
      return GetMeResponseEntity().fromJson(json);
    }
    if (type == (GetMeResponseData).toString()) {
      return GetMeResponseData().fromJson(json);
    }
    if (type == (GetMeResponseDataHospialNetwork).toString()) {
      return GetMeResponseDataHospialNetwork().fromJson(json);
    }
    if (type == (GetMeResponseDataHospialNetworkUserhospital).toString()) {
      return GetMeResponseDataHospialNetworkUserhospital().fromJson(json);
    }
    if (type == (UTResponseEntity).toString()) {
      return UTResponseEntity().fromJson(json);
    }
    if (type == (ApiResponseEntity).toString()) {
      return ApiResponseEntity().fromJson(json);
    }
    if (type == (FamilyResponseEntity).toString()) {
      return FamilyResponseEntity().fromJson(json);
    }
    if (type == (FamilyResponseResult).toString()) {
      return FamilyResponseResult().fromJson(json);
    }
    if (type == (FamilyResponseResultData).toString()) {
      return FamilyResponseResultData().fromJson(json);
    }

    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<CityEntity>[] is M) {
      return data.map<CityEntity>((e) => CityEntity().fromJson(e)).toList()
          as M;
    }
    if (<StateEntity>[] is M) {
      return data.map<StateEntity>((e) => StateEntity().fromJson(e)).toList()
          as M;
    }
    if (<SignUpResponseEntity>[] is M) {
      return data
          .map<SignUpResponseEntity>((e) => SignUpResponseEntity().fromJson(e))
          .toList() as M;
    }
    if (<SignUpResponseData>[] is M) {
      return data
          .map<SignUpResponseData>((e) => SignUpResponseData().fromJson(e))
          .toList() as M;
    }
    if (<SignUpResponseDataUser>[] is M) {
      return data
          .map<SignUpResponseDataUser>(
              (e) => SignUpResponseDataUser().fromJson(e))
          .toList() as M;
    }
    if (<HospitalResponseEntity>[] is M) {
      return data
          .map<HospitalResponseEntity>(
              (e) => HospitalResponseEntity().fromJson(e))
          .toList() as M;
    }
    if (<HospitalResponseResult>[] is M) {
      return data
          .map<HospitalResponseResult>(
              (e) => HospitalResponseResult().fromJson(e))
          .toList() as M;
    }
    if (<HospitalResponseResultData>[] is M) {
      return data
          .map<HospitalResponseResultData>(
              (e) => HospitalResponseResultData().fromJson(e))
          .toList() as M;
    }
    if (<GetMeResponseEntity>[] is M) {
      return data
          .map<GetMeResponseEntity>((e) => GetMeResponseEntity().fromJson(e))
          .toList() as M;
    }
    if (<GetMeResponseData>[] is M) {
      return data
          .map<GetMeResponseData>((e) => GetMeResponseData().fromJson(e))
          .toList() as M;
    }
    if (<GetMeResponseDataHospialNetwork>[] is M) {
      return data
          .map<GetMeResponseDataHospialNetwork>(
              (e) => GetMeResponseDataHospialNetwork().fromJson(e))
          .toList() as M;
    }
    if (<GetMeResponseDataHospialNetworkUserhospital>[] is M) {
      return data
          .map<GetMeResponseDataHospialNetworkUserhospital>(
              (e) => GetMeResponseDataHospialNetworkUserhospital().fromJson(e))
          .toList() as M;
    }
    if (<UTResponseEntity>[] is M) {
      return data
          .map<UTResponseEntity>((e) => UTResponseEntity().fromJson(e))
          .toList() as M;
    }
    if (<ApiResponseEntity>[] is M) {
      return data
          .map<ApiResponseEntity>((e) => ApiResponseEntity().fromJson(e))
          .toList() as M;
    }
    if (<FamilyResponseEntity>[] is M) {
      return data
          .map<FamilyResponseEntity>((e) => FamilyResponseEntity().fromJson(e))
          .toList() as M;
    }
    if (<FamilyResponseResult>[] is M) {
      return data
          .map<FamilyResponseResult>((e) => FamilyResponseResult().fromJson(e))
          .toList() as M;
    }
    if (<FamilyResponseResultData>[] is M) {
      return data
          .map<FamilyResponseResultData>(
              (e) => FamilyResponseResultData().fromJson(e))
          .toList() as M;
    }

    throw Exception("not found");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
